jQuery Effects
==============
jQuery enables us to add effects on a web page. jQuery effects can be categorized into fading, sliding, hiding/showing and animation effects.

hide() , show() --> toggle()
fadeIn(), fadeOut() --> fadeToggle()
slideUp(), slideDown() ---> slideToggle()


1) jQuery hide()
----------------
The jQuery hide() method is used to hide the selected elements.

Syntax:

    $(selector).hide();  
    $(selector).hide(speed)
    $(selector).hide(speed, callback);  
    $(selector).hide(speed, easing, callback);  

where the arguments are :
(a) speed: It is an optional parameter. It specifies the speed of the delay. Its possible values are "slow", "fast" and "milliseconds".

(b) easing: It specifies the easing function to be used for transition.

(c) callback: It is also an optional parameter. It specifies the function to be called after completion of hide() effect.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../styles.css">
    <style>
        #wrapper{
            margin:25px;
        }
        #matter{
            margin:20px;
            font-size:18px;
            text-align:justify;
            background-color:lightgreen;
            padding:10px;
            box-shadow:0 0 10px black;
        }
        #hideButton{
            width:120px;
            font-size: 20px;
            padding:6px;
            background:linear-gradient(45deg,black 50%, orangered 50%);
            color:white;
            border:none;  
        }
    </style>
    <title>JQ Hide</title>
</head>

<body>
    <nav id="header">
        <h2>jQuery | Effect | hide()</h2>
    </nav>

    <div id="wrapper">
        <button id="hideButton">HIDE</button>

        <div id="matter">
            Lorem80...
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        let afterHide = ()=>{
            alert('hiding the section is done with!')
        }

        $('#hideButton').click(function(){
            //$('#matter').hide();
            //$('#matter').hide('slow');
            //$('#matter').hide(3000); //3000ms
            //$('#matter').hide(3000,'linear');
            $('#matter').hide(3000, afterHide); 
        })
    </script>
</body>

</html>



2) jQuery show()
----------------
The jQuery show() method is used to show the selected elements.

Syntax:

    $(selector).show([speed][,easing][,callback]);  
<html>  
<head>  
<script src="jquery-3.5.1.js"></script>  

<script>  
$(document).ready(function()
{  
 $("#hide").click(function()
 {  
  $("p").hide(3000);  
 });  

 $("#show").click(function()
 {  
  $("p").show(3000);  
 });  
});  
</script>  
</head>  

<body>  
<p style="font-family:verdana; font-size:30px" id="para">  
Cognizant <br>
Business Solutions<br>
India
</p>  

<button id="hide">Hide Paragraph </button>  
<button id="show">Show Paragraph </button> 
</body>  
</html>  


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../styles.css">
    <style>
        #wrapper{
            margin:25px;
        }
        #matter{
            margin:20px;
            font-size:18px;
            text-align:justify;
            background-color:lightgreen;
            padding:10px;
            box-shadow:0 0 10px black;
        }
        #hideButton{
            width:120px;
            font-size: 20px;
            padding:6px;
            background:linear-gradient(45deg,black 50%, orangered 50%);
            color:white;
            border:none;  
        }
    </style>
    <title>JQ Hide</title>
</head>

<body>
    <nav id="header">
        <h2>jQuery | Effect | hide() & show()</h2>
    </nav>

    <div id="wrapper">
        <button id="hideButton">HIDE</button>

        <div id="matter">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Rerum qui delectus totam dolorum tempore quidem
            accusamus facere unde, maiores quas nemo odio pariatur expedita exercitationem impedit? Distinctio, aperiam
            impedit error molestias blanditiis saepe, tempora, assumenda quasi repudiandae reprehenderit consectetur
            consequuntur. Nostrum quasi alias voluptatem facere saepe, dolor aliquid hic aspernatur. Quas delectus
            beatae quod asperiores eum, incidunt blanditiis molestias odio hic, modi inventore autem nulla.
            Exercitationem molestiae dicta aliquam corrupti animi distinctio neque nostrum, aperiam quos velit fugiat
            vitae suscipit asperiores pariatur quam eligendi delectus consectetur mollitia magnam repellendus iste. Id
            nesciunt laboriosam earum totam praesentium doloremque excepturi, dolorem impedit!
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $('#hideButton').click(function(){
            let btn_label = $(this).text(); //to get the caption of button
            
            if(btn_label == 'HIDE'){
                 $(this).text('SHOW');
                 $('#matter').hide(2000);                                  
            }
            else{
                 $('#matter').show(2000); 
                 $(this).text('HIDE');   
            }
        })
    </script>
</body>

</html>


3) jQuery toggle()
------------------
The jQuery toggle() is a special type of method which is used to toggle between the hide() and show() method. It shows the hidden elements and hides the shown element.

Syntax:

$(selector).toggle(speed, easing, callback);  

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../styles.css">
    <style>
        #wrapper{
            margin:25px;
        }
        #matter{
            margin:20px;
            font-size:18px;
            text-align:justify;
            background-color:lightgreen;
            padding:10px;
            box-shadow:0 0 10px black;
        }
        #hideButton{
            width:120px;
            font-size: 20px;
            padding:6px;
            background:linear-gradient(45deg,black 50%, orangered 50%);
            color:white;
            border:none;  
        }
    </style>
    <title>JQ Hide</title>
</head>

<body>
    <nav id="header">
        <h2>jQuery | Effect | toggle()</h2>
    </nav>

    <div id="wrapper">
        <button id="hideButton">HIDE</button>

        <div id="matter">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Rerum qui delectus totam dolorum tempore quidem
            accusamus facere unde, maiores quas nemo odio pariatur expedita exercitationem impedit? Distinctio, aperiam
            impedit error molestias blanditiis saepe, tempora, assumenda quasi repudiandae reprehenderit consectetur
            consequuntur. Nostrum quasi alias voluptatem facere saepe, dolor aliquid hic aspernatur. Quas delectus
            beatae quod asperiores eum, incidunt blanditiis molestias odio hic, modi inventore autem nulla.
            Exercitationem molestiae dicta aliquam corrupti animi distinctio neque nostrum, aperiam quos velit fugiat
            vitae suscipit asperiores pariatur quam eligendi delectus consectetur mollitia magnam repellendus iste. Id
            nesciunt laboriosam earum totam praesentium doloremque excepturi, dolorem impedit!
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $('#hideButton').click(function(){
            let btn_label = $(this).text();

            $('#matter').toggle(2000);

            //using ternary / conditional operator
            (btn_label=='HIDE')?$(this).text('SHOW'):$(this).text('HIDE');            
        })
    </script>
</body>

</html>

-----------------------------------
// hide() , show()
$('#btn-1').click(function () {
    if($(this).text() === 'hide'){
        $(this).text('show');
        $('#card-1').hide(500);
    }
    else{
        $(this).text('hide');
        $('#card-1').show(500);
    }
});

// toggle()
$('#btn-2').click(function () {
    $('#card-2').toggle(500);
    if($(this).text() === 'hide'){
        $(this).text('show');
    }
    else{
        $(this).text('hide');
    }
});

// fadeIn , FadeOut()

// FadeToggle()

// slidUp() , slideDown()

// slideToggle()

-----------------------------------

4) jQuery fadeIn()
------------------
jQuery fadeIn() method is used to fade in the element.

Syntax:

    $(selector).fadein();  
    $(selector).fadeIn(speed,callback);   
    $(selector).fadeIn(speed, easing, callback);  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("#div1").fadeIn();  
    $("#div2").fadeIn("slow");  
    $("#div3").fadeIn(5000);  
  });  
});  
</script>  
</head>  
<body>  
<p>fadeIn() method examples</p>  
<button>Click to fade in boxes</button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;display:none;background-color:red;"></div>
<br>  

<div id="div2" style="width:80px;height:80px;display:none;background-color:green;"></div>
<br>  

<div id="div3" style="width:80px;height:80px;display:none;background-color:blue;"></div>  
</body>  
</html>   

5) jQuery fadeOut()
-------------------
The jQuery fadeOut() method is used to fade out the element.

Syntax:

    $(selector).fadeOut();  
    $(selector).fadeOut(speed,callback);   
    $(selector).fadeOut(speed, easing, callback);  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("#div1").fadeOut();  
    $("#div2").fadeOut("slow");  
    $("#div3").fadeOut(5000);  
  });  
});  
</script>  
</head>  
<body>  
<p>fadeOut() method examples</p>  
<button>Click to fadeOut in boxes </button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;background-color:red;"></div>
<br>  

<div id="div2" style="width:80px;height:80px;background-color:green;"></div>
<br>  

<div id="div3" style="width:80px;height:80px;background-color:blue;"></div>  
</body>  
</html>   

6) jQuery fadeToggle()
----------------------
jQuery fadeToggle() method is used to toggle between the fadeIn() and fadeOut() methods. If the elements are faded in, it will make them faded out and if they are faded out it will make them faded in.

Syntax:

    $(selector).fadeToggle();  
    $(selector).fadeToggle(speed,callback);   
    $(selector).fadeToggle(speed, easing, callback);  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
   $("#div1").fadeToggle(2000);  
  });  
});  
</script>  
</head>  
<body>  
<button>Fade Toggle</button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;background-color:red;"></div>

</body>  
</html>   




<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../styles.css">
    <style>
        #wrapper{
            margin:25px;
        }
        #matter{
            margin:20px;
            font-size:18px;
            text-align:justify;
            background-color:lightgreen;
            padding:10px;
            box-shadow:0 0 10px black;
        }
        #hideButton{
            width:120px;
            font-size: 20px;
            padding:6px;
            background:linear-gradient(45deg,black 50%, orangered 50%);
            color:white;
            border:none;  
        }
    </style>
    <title>JQ Hide</title>
</head>

<body>
    <nav id="header">
        <h2>jQuery | Effect | fadeIn(), fadeOut(), fadeToggle()</h2>
    </nav>

    <div id="wrapper">
        <button id="hideButton">FADE-OUT</button>

        <div id="matter">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Rerum qui delectus totam dolorum tempore quidem
            accusamus facere unde, maiores quas nemo odio pariatur expedita exercitationem impedit? Distinctio, aperiam
            impedit error molestias blanditiis saepe, tempora, assumenda quasi repudiandae reprehenderit consectetur
            consequuntur. Nostrum quasi alias voluptatem facere saepe, dolor aliquid hic aspernatur. Quas delectus
            beatae quod asperiores eum, incidunt blanditiis molestias odio hic, modi inventore autem nulla.
            Exercitationem molestiae dicta aliquam corrupti animi distinctio neque nostrum, aperiam quos velit fugiat
            vitae suscipit asperiores pariatur quam eligendi delectus consectetur mollitia magnam repellendus iste. Id
            nesciunt laboriosam earum totam praesentium doloremque excepturi, dolorem impedit!
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $('#hideButton').click(function(){
            let btn_label = $(this).text();
            /*
            if(btn_label == 'FADE-OUT'){
                $(this).text('FADE-IN')
                $('#matter').fadeOut(1000);                
            }
            else{
                $(this).text('FADE-OUT')
                $('#matter').fadeIn(1000);
            } 
            */

            (btn_label=='FADE-OUT')?$(this).text('FADE-IN'):$(this).text('FADE-OUT');
            $('#matter').fadeToggle(2000);           
        })
    </script>
</body>

</html>


7) jQuery fadeTo()
------------------
jQuery fadeTo() method is used to fading to a given opacity.

Syntax:

    $(selector).fadeTo(speed, opacity);  
    $(selector).fadeTo(speed, opacity, callback);   
    $(selector).fadeTo(speed, opacity, easing, callback);  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
     $("#div1").fadeTo("slow", 0.1);  
     $("#div2").fadeTo("slow", 0.3);  
     $("#div3").fadeTo("slow", 0.9);  
  });  
});  
</script>  
</head>  
<body>  
<button>Fade To</button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;background-color:red;"></div>
<br>  

<div id="div2" style="width:80px;height:80px;background-color:green;"></div>
<br>  

<div id="div3" style="width:80px;height:80px;background-color:blue;"></div>  
</body>  
</html>   


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../styles.css">
    <style>
        #wrapper{
            margin:25px;
        }
        #matter{
            margin:20px;
            font-size:18px;
            text-align:justify;
            background-color:lightgreen;
            padding:10px;
            box-shadow:0 0 10px black;
        }
        #hideButton{
            width:120px;
            font-size: 20px;
            padding:6px;
            background:linear-gradient(45deg,black 50%, orangered 50%);
            color:white;
            border:none;  
        }
    </style>
    <title>JQ Hide</title>
</head>

<body>
    <nav id="header">
        <h2>jQuery | Effect | fadeIn(), fadeOut(), fadeToggle()</h2>
    </nav>

    <div id="wrapper">
        <button id="hideButton">FADE-OUT</button>

        <div id="matter">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Rerum qui delectus totam dolorum tempore quidem
            accusamus facere unde, maiores quas nemo odio pariatur expedita exercitationem impedit? Distinctio, aperiam
            impedit error molestias blanditiis saepe, tempora, assumenda quasi repudiandae reprehenderit consectetur
            consequuntur. Nostrum quasi alias voluptatem facere saepe, dolor aliquid hic aspernatur. Quas delectus
            beatae quod asperiores eum, incidunt blanditiis molestias odio hic, modi inventore autem nulla.
            Exercitationem molestiae dicta aliquam corrupti animi distinctio neque nostrum, aperiam quos velit fugiat
            vitae suscipit asperiores pariatur quam eligendi delectus consectetur mollitia magnam repellendus iste. Id
            nesciunt laboriosam earum totam praesentium doloremque excepturi, dolorem impedit!
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $('#hideButton').click(function(){
            let btn_label = $(this).text();
            /*
            if(btn_label == 'FADE-OUT'){
                $(this).text('FADE-IN')
                $('#matter').fadeOut(1000);                
            }
            else{
                $(this).text('FADE-OUT')
                $('#matter').fadeIn(1000);
            } 
            */

            (btn_label=='FADE-OUT')?$(this).text('FADE-IN'):$(this).text('FADE-OUT');
            $('#matter').fadeToggle(2000);           
        })
    </script>
</body>

</html>


8) jQuery slideDown()
---------------------
jQuery slideDown() method is used to slide down an element.

Syntax:

    $(selector).slideDown(speed);  
    $(selector).slideDown(speed, callback);   
    $(selector).slideDown(speed, easing, callback);  

<html>  
<head> 
<style>   
#panel, #flip 
{  
    padding: 5px;  
    text-align: center;  
    background-color: #00FFFF;  
    border: solid 1px #c3c3c3;  
}  
#panel 
{  
    padding: 50px;  
    display: none;  
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function(){  
    $("#flip").click(function(){  
        $("#panel").slideDown("slow");  
    });  
});  
</script>  

</head>  
<body>  
<div id="flip">Click to slide down panel </div>  
<div id="panel">Hello jQuery! <br> It is the best JS Framework</div>  
</body>  
</html>  


9) jQuery slideUp()
-------------------
jQuery slideUp() method is used to slide up an element.

Syntax:

    $(selector).slideUp(speed);  
    $(selector).slideUp(speed, callback);   
    $(selector).slideUp(speed, easing, callback);  


<html>  
<head> 
<style>   
#panel, #flip 
{  
    padding: 5px;  
    text-align: center;  
    background-color: #00FFFF;  
    border: solid 1px #c3c3c3;  
}  
#panel 
{  
    padding: 50px;      
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function(){  
    $("#flip").click(function(){  
        $("#panel").slideUp("slow");  
    });  
});  
</script>  

</head>  
<body>  
<div id="flip">Click to slide up panel </div>  
<div id="panel">Hello jQuery! <br> It is the best JS Framework</div>  
</body>  
</html>  

10) jQuery slideToggle()
------------------------
jQuery slideToggle () method is used to toggle between slideUp() and slideDown() method. If the element is slide down, it will slide up the element and if it is slide up, it will slide down.

Syntax:

    $(selector).slideToggle(speed);  
    $(selector).slideToggle(speed, callback);   
    $(selector).slideToggle(speed, easing, callback);  

<html>  
<head> 
<style>   
#panel, #flip 
{  
    padding: 5px;  
    text-align: center;  
    background-color: #00FFFF;  
    border: solid 1px #c3c3c3;  
}  
#panel 
{  
    padding: 50px;
   display:none;
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function(){  
    $("#flip").click(function(){  
        $("#panel").slideToggle("slow");  
    });  
});  
</script>  

</head>  
<body>  
<div id="flip">Click to slide Toggle panel </div>  
<div id="panel">Hello jQuery! <br> It is the best JS Framework</div>  
</body>  
</html>  
-----------------------------------


11) jQuery animate()
--------------------
The jQuery animate() method provides you a way to create custom animations.

Syntax:
 $(selector).animate({params}, speed, easing, callback);  

where the attributes are:
a) params - this parameter defines the CSS properties to be animated.

b) speed - this parameter is optional and specifies the duration of the effect. It can be set as "slow" , "fast" or milliseconds.

d) callback - this parameter is also optional and it is a function which is executed after the animation completes. 

Example - 1

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
<script>   
$(document).ready(function()
{  
 $("button").click(function()
 {  
   //$("div").animate({left: '450px'});
  $("div").animate({left: '450px'}, 5000); 
 });  
});  
</script>   
</head>  

<body>  
<button>Start Animation</button>  
<div style="background:#FFA100;height:100px;width:100px;position:absolute;"></div>  
</body>  
</html>  

Example - 2: jQuery animate() method using multiple properties

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("div").animate(
  {
    left: '250px',  
    opacity: '0.5',  
    height: '200px',  
    width: '200px'  
  },5000);  
 });  
});  
</script>   
</head>  
<body>  
<button>Start Animation</button>  
<br><br>
<div 
style="background:#FF0000;height:100px;width:100px;position:absolute;">
</div>  
</body>  
</html>  


Example - 3 :: jQuery animate() method using relative values

You can also define relative values (it is relative to the element's current value) by putting += or -= in front of the value. 

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
<script>   
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("div").animate(
  {  
   left: '250px',  
   height: '+=150px',  
   width: '+=150px'  
  },5000);  
 });  
});  
</script>   
</head>  
<body>  
<button>Start Animation</button>  
<br><br>
<div style="background:#98bf21; height:100px;width:100px;position:absolute;"> 
</div>  
</body>  
</html>   

Example - 4:: jQuery animate() method using predefined value

You can also specify a property's animation value as "show" , "hide" , or "toggle".

In this example, we are using "toggle" value for height, it means it will show/hide the selected element.

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function()
{  
    $("button").click(function()
    {  
        $("div").animate({height: 'toggle'  });  
    });  
});  
</script>   
</head>  
<body>  
<button>Start Animation</button>  
<div style="background:#ff0000; height:100px;width:100px;position:absolute;"></div>  
</body>  
</html>  


12) jQuery delay()
------------------
The jQuery delay() method is used to delay the execution of functions in the queue. It is a best method to make a delay between the queued jQuery effects. The jQuery delay () method sets a timer to delay the execution of the next item in the queue.

Syntax:

    $(selector).delay (speed, queueName)   

Arguments are:

(a) speed: It is an optional parameter. It specifies the speed of the delay. Its possible vales are slow, fast and milliseconds.

(b) queueName: It is also an optional parameter. It specifies the name of the queue. Its default value is "fx" the standard queue effect.

Example - 1

<html>    
<head>    
<script src="jquery-3.5.1.min.js"> </script>    
<script>    
$(document).ready(function()
{    
  $("button").click(function()
  {    
    $("#div1").delay("slow").fadeIn();    
  });    
});    
</script>    
</head>    
<body>    
<button>Click Here</button>
<br>  <br>
<div id="div1" style="width:90px;height:90px;display:none;background-color:black;"></div>
</body>    
</html>    

Example - 2:
jQuery delay() example with different values

<html>    
<head>    
<script src="jquery-3.5.1.min.js"> </script>    

<script>    
$(document).ready(function(){    
  $("button").click(function(){    
    $("#div1").delay("fast").fadeIn();    
    $("#div2").delay("slow").fadeIn();    
    $("#div3").delay(1000).fadeIn();    
    $("#div4").delay(2000).fadeIn();    
    $("#div5").delay(4000).fadeIn();    
});    
});    
</script>    
</head>    
<body>    

<button>Click to fade in boxes with a different delay times</button>    
<br><br>    
<div id="div1" style="width:90px;height:90px;display:none;background-color:black;"></div>
<br><br>

<div id="div2" style="width:90px;height:90px;display:none;background-color:green;"></div>
<br><br>

<div id="div3" style="width:90px;height:90px;display:none;background-color:blue;"></div>
<br><br>

<div id="div4" style="width:90px;height:90px;display:none;background-color:red;"></div>
<br><br>    

<div id="div5" 
style="width:90px;height:90px;display:none;background-color:purple;"></div>   
</body>    
</html>    

*******************************
13) jQuery html()
-----------------
jQuery html() method is used to change the entire content of the selected elements. It replaces the selected element content with new contents.

Syntax:

(a) $(selector).html()  - It is used to return content.

(b) $(selector).html(content)  - It is used to set content.

(c) $(selector).html(function(index,currentcontent)) - 
It is used to set content by calling function.


The text() method is used to set or return only the text content of the selected elements.
Parameters of jQuery html() method

(a) Content 	It is an essential parameter. It is used to specify the new content for the selected elements. It can also contain HTML tags.

(b) Function (index, currentcontent) 	It is an optional parameter. It specifies a function that returns the new content for the selected elements.

 > Index: It shows the index position of the element in the set.
 > Currentcontent: It shows the current HTML content of the selected element.

Example - 1

<html>  
<head>  
<style>
p
{
 font-family:verdana;
 font-size:30px;
}
</style>
<script src="jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("p").html("Hello <b>jQuery</b>"); 
  });  
});  
</script>  
</head>  
<body>  
 <button>Click Here</button>  
 <br><br>
 <p>This is a paragraph.</p>  
 <p>This is another paragraph.</p>  
</body>  
</html>  

Example - 2:

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
    $("button").click(function()
	{  
     alert($("p").html());  
    });  
});  
</script>  
</head>  
<body>  
  
<button>Return the content of p element</button>  
<br><br>

<p>This is first <b>paragraph</b>.</p>  

<p>This is another <b>paragraph</b>.</p>  
</body>  
</html>  



********************************

14) jQuery text()
-----------------
The jQuery text() method is used to set or return the text content of the selected elements.

What is the difference between jQuery text() method and jQuery html() method?

Diff (1): The jQuery text() method is used to set or return html content without HTML markup while, html() method is used to set or return the innerHTML (text + HTML markup).

Diff (2): The jQuery text() method can be used in both XML and HTML document while jQuery html() method can't.

Syntax:

To return text content-    $(selector).text()   

To set text content -    $(selector).text(content)   

To set text content using a function:
   $(selector).text(function(index,currentcontent))  

Content 	It is a mandatory parameter. It specifies the new text content for the selected elements. The special characters will be encoded in this parameter.
Function (index,currentcontent) 	It is an optional parameter. It specifies the function that returns the new text content for the selected elements.

    Index: It provides the index position of the element in the set.
    Currentcontent: It provides the current content of the selected elements.


Example - 1

<html>  
<head>  
<style>  
p 
{  
color: blue;  
margin: 8px; 
font-size:30px;
font-family:verdana;
}  
b 
{  
color: red;  
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script> 
$(document).ready(function()
{
 $("button").click(function()
 {
  var str=$("p:first").text();  
  //alert(str);
  $("p:last").html(str);  
 });
});
</script>  

</head>  
<body>  
<p><b>Hello</b> jQuery</p>  
<p>Paragraph - 2</p>  
<br>
<button>Click Me</button>
</body>  
</html>  


Example - 2

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").html("<h1>Welcome to Cognizant</h1>");  
 });  
});  
</script>  
</head>  
<body>  
<button>Click here to set text content for all p elements</button>  
<p>Paragraph - 1</p>  
<p>Paragraph - 2</p>  
</body>  
</html>  


*********************************

15) jQuery val()
----------------

There are two usage of jQuery val() method.

(a) It is used to get current value of the first element in the set of matched elements.

(b) It is used to set the value of every matched element.

Syntax:

  $(selector).val()  - It is used to get value.

  $(selector).val(value) - It is used to set value.

  $(selector).val(function(index,currentvalue)) - 
It is used to set value using function.

Function (index, currentvalue)	It is an optional parameter. It is used to specify a function that returns the value to set. 

Example - 1 : Display the selected value of the drop down list box in the first paragraph

<html>    
<head>    
<style>    
p 
{    
color: red;    
margin: 4px;    
font-family:verdana;
font-size:25px;
}    
b 
{    
color: blue;    
}    
</style>    

<script src="js/jquery-3.5.1.min.js"> </script>    

<script>    
function displayVals() 
{    
  var data=$("#course").val();  
  $("p:first").html("<b>Selected Value: &nbsp;&nbsp;&nbsp;"+ data+"</b>"); 
}

$(document).ready(function()
{
 $("select").change(displayVals);  
});
</script>   
</head>    

<body>    
<p>**********</p>    
<br>
<p> Select the Course : 
<select id="course">    
 <option>WAD</option>    
 <option>Java</option>    
 <option>Android</option>    
 <option>SQL Server</option>    
</select>    
</p>
</body>    
</html>   


Example - 2

<html>  
<head>  
<style>  
*
{
font-family:verdana;
font-size:25px;
}
p 
{    
color: red;    
margin: 4px;    
}    
b 
{    
color: blue;    
} 
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
displayVals();

function displayVals() 
{  
 var sv=$("#single").val();  

 var mvs=$("#multiple").val() || [];  
 $("p").html("<b>Single:</b> " + sv +   " <b>Multiple:</b> " + mvs.join(", ")); 
}  

$(document).ready(function()
{
 $("select" ).change(displayVals);  
});
</script>  

</head>  

<body>  
<p></p>  
<select id="single">  
  <option>Single -1</option>  
  <option>Single -2</option> 
  <option>Single -3</option>  
</select>  

<select id="multiple" multiple>  
  <option selected="selected"> Multiple -1</option>  
  <option>Multiple -2</option>  
  <option>Multiple -3</option>  
</select>  

</body>  
</html> 


Example - 3

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("input:text").val("Cognizant");  
 });  
});  
</script>  
</head>  
<body>  
<p>
Name: <input type="text" name="name" value="Sunil">
</p>  
<button>Set the value of the input field 
</button>  
</body>  
</html>  

********************************************
16) jQuery css()
----------------
The jQuery CSS() method is used to get or set style properties or values for selected elements. 

jQuery CSS() method provides two ways:

1) Return a CSS property
Syntax:    .css("propertyname");  

2) Set a CSS property
Syntax:    .css("propertyname","value");     

Example - 1

<html>
<head>  
<style>
*
{
 font-family:Tahoma;
 font-size:30px;
}
</style>

<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    alert("Background color of Paragraph = " + $("p").css("background-color"));  
  });  
});  
</script>  
</head>  
<body>  
<h2>This is a heading</h2>  
<p style="background-color:#ff0000">The background-color of this paragraph is ed.</p>  
<p style="background-color:#00ff00">The background-color of this paragraph is green.</p>  
<p style="background-color:#0000ff">The background-color of this paragraph is blue.</p> 
 
<button>Click here to get the background-color of first matched element</button>  
</body>  
</html>   

Note: The above example returns the background-color value of the first matched element. 


<html>
<head>  
<style>
*
{
 font-family:Tahoma;
 font-size:30px;
}
</style>

<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("p").css("background-color","pink");  
  });  
});  
</script>  
</head>  
<body>  
<h2>This is a heading</h2>  
<p style="background-color:#ff0000">The background-color of this paragraph is ed.</p>  
<p style="background-color:#00ff00">The background-color of this paragraph is green.</p>  
<p style="background-color:#0000ff">The background-color of this paragraph is blue.</p> 
 
<button>Change Background color of all Paragraphs</button>  
</body>  
</html>   


3) Set multiple CSS properties

we can set multiple CSS properties together by using the following syntax:

css({"propertyname":"value", "propertyname":"value",...});    

<html>
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").css({"background-color": "yellow","font-size": "200%"});  
 });  
});  
</script>  
</head>  
<body>  
<h2>This is a heading</h2>  
<p style="background-color:#ff0000">The background-color of this paragraph is red.</p>  
<p style="background-color:#00ff00">The background-color of this paragraph is green.</p>  
<p style="background-color:#0000ff">The background-color of this paragraph is blue.</p> 
 
<p>This paragraph has no background-color.</p>  
<button>Click here to set multiple styles for all selected elements.</button>  
</body>  
</html>  

***************************

17) jQuery before()
-------------------
The jQuery before() method is used to insert the specified content before the selected elements. It adds the content specified by the parameter, before each element in the set of matched elements.

The before() and insertBefore() both methods are used to perform same task. The main difference between them is in syntax, and the placement of the content and the target.

Syntax:

$(selector).before(content, function(index))  

Content 	It is a mandatory parameter. It specifies the content to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements 

Function (index) 	It specifies a function that returns the content which is used to insert.

Index: It provides the index position of the element in the set.

Example - 1
<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
   $("p").before("<p><b>Cognizant</b></p>");  
 });  
});  
</script>  
</head>  
<body>  
 <button>Insert content before each p element</button>  
 <p>This is a software development center.</</p>  
 <p>This is a training institute.</p>  
</body>  
</html>  
********************************

18) jQuery prepend()
--------------------
The jQuery prepend() method is used to insert the specified content at the beginning (as a first child) of the selected elements. It is just the opposite of the jQuery append() method.

If you want to insert the content at the end of the selected elements, you should use the append() method.

Syntax:

    $(selector).prepend(content,function(index,html))  

Content 	It is a mandatory parameter. It specifies the content which you want to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements

Function (index, html) 	It is an optional parameter. It specifies a function that returns the content which is inserted.

    Index:It is used to provide the index position of the element in the set.
    Html: : It provides the current HTML of the selected element.


<html>    
<head>    
<script src="js/jquery-3.5.1.min.js"></script>    
<script>    
$(document).ready(function(){    
    $("#btn1").click(function(){    
        $("p").prepend("<b>Prepended text</b>. ");    
    });    
});    
</script>    
</head>    
<body>    
<p>This is the first paragraph.</p>    
<p>This is the second paragraph.</p>    
<button id="btn1">Prepend text</button>    
</body>    
</html>    


Example - 2

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("#btn1").click(function(){  
        $("p").prepend("<b>Prepended text</b>. ");  
    });  
    $("#btn2").click(function(){  
        $("ol").prepend("<li>Prepended item</li>");  
    });  
});  
</script>  
</head>  
<body>  
<p>This is the first paragraph.</p>  
<p>This is the second paragraph.</p>  
<ol>  
  <li>Item no.1</li>  
  <li>Item no.2</li>  
  <li>Item no.3</li>  
</ol>  
<button id="btn1">Prepend text</button>  
<button id="btn2">Prepend list item</button>  
</body>  
</html>  

**************************************************

19) jQuery after()
------------------
The jQuery after() method is used to insert specified content after the selected element. It is just like jQuery append() method.

If you want to insert content before the selected element, you should use jQuery before() method.

Syntax:

    $(selector).after(content,function(index))   


Content 	It is a mandatory parameter. It specifies the content to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements 

Function (index) 	It specifies a function that returns the content which is used to insert.

    index: It provides the index position of the element in the set.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        $("p").after("<p><b>Cognizant</b></p>");  
    });  
});  
</script>  
</head>  
<body>  
<button>Insert content after each p element</button>  
<p>This is a tutorial website.</p>  
<p>This is a training institute.</p>  
</body>  
</html>  


**************************************

20) jQuery insertAfter()
------------------------
The jQuery after() and jQuery insertAfter() both methods are used to perform the same task of inserting additional contents after the selected elements.

Difference between jQuery after() and insertAfter()

The main difference between after() and insertAfter is in syntax and placement of the content and target.

In after() method, target is the selected element and content is placed as an argument of the method.

    $(target).after(contentToBeInserted)  

In insertAfter() method, content is the selected element and target is placed as an argument of the method.

    $(contentToBeInserted).insertAfter(target)  

Note: If you want to insert HTML elements before the selected element, you should use the insertBefore() method.

Syntax:

    $(content).insertAfter(selector)  

Content 	It is a mandatory parameter. It specifies the content which you want to insert.
Selector 	It is also a mandatory parameter. It specifies the place where you insert the content.

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("<span><b>Cognizant</b></span>").insertAfter("p");  
 });  
});  
</script>  
</head>  
<body>  
<button>Insert span element after each p 
element</button>  
<p>This is a tutorial website.</p>  
<p>This is a training institute.</p>  
</body>  
</html>  

*******************************

21) jQuery append()
-------------------
The jQuery append() method is used to insert specified content as the last child (at the end of) the selected elements in the jQuery collection.

The append () and appendTo () methods are used to perform the same task. The only difference between them is in the syntax.

Syntax:

    $(selector).append(content, function(index, html))  

Content 	It is a mandatory parameter. It specifies the content which you want to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements

Function (index,html) 	It is an optional parameter. It specifies the function that returns the content to insert.

    Index: It returns the index position of the element in the set.
    HTML: It returns the current HTML of the selected element.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("#btn1").click(function(){  
        $("p").append(" <b>Newly added appended text</b>.");  
    });  
    $("#btn2").click(function(){  
        $("ol").append("<li><b>Newly added appended item</b></li>");  
    });  
});  
</script>  
</head>  
<body>  
<p>This is a paragraph.</p>  
<p>This is another paragraph.</p>  
<ol>  
  <li>Item no.1</li>  
  <li>Item no.2</li>  
  <li>Item no.3</li>  
</ol>  
<button id="btn1">Append text</button>  
<button id="btn2">Append item</button>  
</body>  
</html>  

******************************************

22) jQuery appendTo()
---------------------
The appendTo() method is used to add additional content at the end of the selected elements. It is same as jQuery append() method. There is only syntactical difference between append() and appendTo() methods.

Syntax:

    $(content).appendTo(selector)   


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        $("<span><b>Cognizant</b></span>").appendTo("p");  
    });  
});  
</script>  
</head>  
<body>  
<button>Add new content at the end of each p element</button>  
<p>I am a new student.</p>  
<p>I am also a new student.</p>  
</body>  
</html>  

*********************************
23) jQuery clone()
------------------
The jQuery clone() method is used to make copies of the set of matched elements. It also makes copies of their child nodes, texts and attributes. The clone() method is a convenient way to duplicate elements on a page.

Syntax:

    $(selector).clone(true|false)  

true 	It specifies that event handlers also should be copied.
false 	It is a default parameter. It specifies that event handler should not be copied.

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").clone().appendTo("body");  
 });  
});  
</script>  
</head>  
<body>  
<p><b> Paragraph-1</b></p>  
<p><b>Paragraph - 2</b></p>  
<button>Click here, to clone all p elements, and append them to the body element</button>  
</body>  
</html>  


**************************************

24) jQuery remove()
-------------------

This method is used to remove the selected elements out of the DOM. It removes the selected element itself, as well as everything inside it (including all texts and child nodes). This method also removes the data and the events of the selected elements.
If you want to remove elements without removing data and events, you should use the detach() method. If you want to remove only data and events, use the empty() method.

Syntax:

    $(selector).remove()  
    $(selector).remove(selector)  

Selector 	is an optional parameter. It specifies whether to remove one or more elements. If you have to remove more than one element then you should separate them with comma (,).

<html>  
<head>  
<style>  
p 
{  
 background: pink;  
 margin: 6px 0;  
}  
</style>  

<script src="https://code.jquery.com/jquery-1.10.2.js"> </script>  
</head> 

<body>  
<p>Hello Guys!</p>  
We are from Cognizant<br>  
<p>A place for all technology.</p>  
<button>Execute remove() method on 
paragraphs</button>  

<script>  
$("button" ).click(function() 
{  
 $("p").remove();  
});  
</script>  
</body>  
</html>  

****************************

25) jQuery empty()
------------------
This method is used to remove all child nodes and content from the selected elements. This method doesn't remove the element itself.

If you want to remove the element without removing data and events, you should use the detach() method.

If you want to remove the element as well as its data and events, you should use the remove() method.

Syntax:

    $(selector).empty()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
{  
  $("div").empty();  
});  
});  
</script>  
</head>  
<body>  
<div style="height:150px;background-color:yellow">  
    11111111111<br/>  
    22222222222</br>  
    33333333333<br/>  
    44444444444<br/>  
    55555555555<br/>  
    66666666666<br/>  
    <p><b>This numbers are written inside the div.</b></p>  
    </div>  
    <p>This paragraph is written outside the div.</p>  
    <button>Execute empty() method to remove the content of div element.</button>  
    </body>  
    </html>  


************************************
26) jQuery detach()
-------------------
The jQuery detach() method is used to remove the selected elements, including all texts and child nodes and keeps only data and events.

This method saves a copy of the removed elements to reinsert them whenever they needed later.

There are some other methods also which are used to remove elements e.g. jQuery remove() method, jQuery empty() method etc. But there is a little difference among them.

jQuery remove() method: This method is used to remove the elements as well as its data and events.

jQuery empty() method: This method is used to remove only the content from the selected elements.

Syntax:

    $(selector).detach()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").detach();  
 });  
});  
</script>  
</head>  
<body>  
<p>Hello Guys!</p>  
<p>This is a Paragraph</p>  
<button>Click here to detach all p 
elements</button>  
</body>  
</html>   

Detach2.html

<html lang="en">  
<head>  
<style>  
p 
{  
 background: lightpink;  
 margin: 6px 0;  
 font-family:verdana;
 font-size:24px;
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p>Hello Guys!</p>  
<p>This is a Paragraph</p>  
<button>Click here to Attach/detach all p elements. </button>  

<script>  

var p;  
$("button").click(function() 
{  
if(p) 
{  
 p.appendTo("body");  
 p = null;  
} 
else 
{  
 p=$("p").detach();  
}  
});  
</script>  
</body>  
</html>  


Difference between detach() and remove() method

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("#btn1").click(function(){  
        $("body").append($("#p1").detach());  
    });  
    $("#btn2").click(function(){  
        $("body").append($("#p2").remove());  
    });  
    $("p").click(function(){  
        $(this).animate({fontSize: "+=1px"})  
    });  
});  
</script>  
</head>  
<body>  
<p id="p1"><b>This paragraph will keep its click event even after it is moved.</b></p>  
<p id="p2">This paragraph will not keep its click event after it is moved.</p>  
<button id="btn1">Detach and append p element</button>  
<button id="btn2">Remove and append p element</button>  
</body>  
</html>  

By the above example, it is clear that jQuery detach() method doesn't remove inner data and events. In the above example, the click event is remained safe even after the detach() method is applied.

*********************************************

27) jQuery scrollTop()
----------------------
This method is used to set or return the vertical scrollbar position for the selected element. When the scrollbar is on the top, it specifies the position 0.

To return the position: When this method is used to return the position, it provides the current vertical position of the first matched element in the set.

To set the position: When this method is used to set the position, it sets the vertical position of the scrollbar for all matched element.

Syntax:

To return vertical scrollbar position:

    $(selector).scrollTop()  
    $(selector).scrollTop(position)  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  //$("div").scrollTop(25);
  alert($("div").scrollTop()+" px");  
 });  
});  
</script>  
</head>  
<body>  
<div style="border:1px solid black; width:150px;height:100px;overflow:auto"> 
111111111111<br>
22222222222<br>
33333333333<br>
111111111111<br>
22222222222<br>
33333333333<br>
111111111111<br>
22222222222<br>
33333333333
</div>

<br>  

<button>Return the vertical position of the scrollbar</button>  
<p>Move the scrollbar down and click the 
button again.</p>  
</body>  
</html>  


*******************************

28) jQuery attr()
-----------------
The jQuery attr() method is used to set or return attributes and values of the selected elements.

There are two usage of jQuery attr() method.

(a) To return attribute value: This method returns the value of the first matched element.

(b) To set attribute value: This method is used to set one or more attribute/value pairs of the set of matched elements.

Syntax:

To return an attribute's value:  
  $(selector).attr(attribute)  

To set an attribute and value:   
  $(selector).attr(attribute,value)  

To set an attribute and value by using a function:  $(selector).attr(attribute,function(index,currentvalue))  

To set multiple attributes and values:   $(selector).attr({attribute:value, attribute:value,...})   

where:

Attribute 	This parameter is used to specify the name of the attribute.
Value 	This parameter is used to specify the value of the attribute.
Function (index, currentvalue) 	It is a parameter to specify a function that returns an attribute value to set.

    Index: It is used to receive the index position of the element in the set.
    Currentvalue: It is used to provide the current attribute value of selected elements.


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script> 

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("img").attr("width","500"); 
  $("img").attr("src","images/im3.jpg"); 
  $("img").attr("title","Good Afternoon");

  alert($("img").attr("src"));
 });  
});  
</script>  
</head>  

<body>  
<img src="images/gm.jpg" alt="Good Morning Friends" width="284" height="160" title="Good Morning"> <br>

<button>Set the width attribute of the image</button>  
</body>  
</html>  


29) jQuery prop()
-----------------
jQuery prop() method is used for two purpose.

> It is used to return the value of a property for the first element in a set of matched elements.

> It is used to set one or more property value for a set of matched element.

The jQuery prop() method is generally used to retrieve property values i.e. DOM properties (like tagName, nodeName, defaultChecked) or own custom made properties. This is a very convenient way to set the values of properties, especially the multiple properties. 

If you want to retrieve HTML attributes, you should use the attr() method instead.

The removeProp() method is used to remove a property. 

Syntax:

To return the value of a property:      $(selector).prop(property)  

To set the property and value:      $(selector).prop(property,value)  

To set property and value by using a function:    $(selector).prop(property,function(index,currentvalue))  

To set multiple properties and values:    $(selector).prop({property:value, property:value,...})  


Property 	It specifies the name of the property.
Value 	It defines the value of the property.
Function(index, currentvalue) 	It specifies a function which returns the value of the property to set.

    Index: It provides the index position of the element in the set.
    Currentvalue: It provides the current property value of the selected element.


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function()
{  
    $("button").click(function()
    {  
        var $x = $("div");  
        $x.prop("color","#e0eeee");  
        $x.append("The value of the color property: " + $x.prop("color"));  
        $x.removeProp("color");  
        $x.append("<br>Now the value of the color property: " + $x.prop("color"));  
    });  
});  
</script>  
</head>  
<body>  
<button>Add and remove a property</button><br><br>  
<div></div>  
</body>  
</html>  


Example - 2

<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>prop demo</title>  
  <style>  
  p {  
    margin: 20px 0 0;  
  }  
  b {  
    color: red;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<input id="check1" type="checkbox" checked="checked">  
<label for="check1">Check me</label>  
<p></p>  
<script>  
$( "input" ).change(function() {  
  var $input = $( this );  
  $( "p" ).html(  
    ".attr( \"checked\" ): <b>" + $input.attr( "checked" ) + "</b><br>" +  
    ".prop( \"checked\" ): <b>" + $input.prop( "checked" ) + "</b><br>" +  
    ".is( \":checked\" ): <b>" + $input.is( ":checked" ) ) + "</b>";  
}).change();  
</script>  
</body>  
</html>  


Difference between jQuery attr() and jQuery prop() method: 

(a) The jQuery attr() method is used to retrieve the HTML attribute values while jQuery prop() method is used to retrieve the property values.

(b) The attr() method changes the attribute of the HTML tag while the prop() method changes a property for the HTML tag as per the DOM tree.

(c) Properties are generally simpler to deal with than attributes so the jQuery prop() method is mostly used rather than attr() method.


30) jQuery offset()
-------------------
The jQuery offset() method is used to get the current offset of the first matched element.

It provides two methods: to set or return the offset co-ordinates for the selected elements, relative to the document.

    To return the offset: When this method is used to return the offset, it returns the offset co-ordinates of the FIRST matched element. It specifies the object's two properties: the top and left positions in pixels.
    To set the offset: When this method is used to set the offset, it sets the offset co-ordinates of ALL matched elements.


Syntax:

To return the offset co-ordinates:    	      $(selector).offset()   

To set the offset co-ordinates:            $(selector).offset({top:value,left:value})   

To SET offset co-ordinates using a function:    $(selector).offset(function(index,currentoffset))   

{top:value,left:value} 	It is a mandatory parameter while setting the offset. It specifies the top and left co-ordinates in pixels.
Function (index,currentoffset): 	It is an optional parameter. It specifies a function that returns an object containing the top and left coordinates.

    Index: It returns the index position of the element in the set.
    Currentoffset:It returns the current coordinates of the selected element.


Example -1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        var x = $("p").offset();  
        alert("Top: " + x.top + " Left: " + x.left);  
    });  
});  
</script>  
</head>  
<body>  
<p>This is a Paragraph</p>  
<button>Click here to return the offset coordinates of the p element</button>  
</body>  
</html>  


Example - 2

<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.min.js"></script>  

<script type="text/javascript">  

$(document).ready(function() 
{  
$("div").click(function() 
{  
var offset=$(this).offset();  
$("#lresult").html("Left offset: <span>" +offset.left+"</span>.");  
$("#tresult").html("Top offset: <span>" + offset.top + "</span>.");  
});  
});  
</script>  
<style>  
div
{ 
width:60px; 
height:60px; 
margin:5px; 
float:left;
}  
</style>  
</head>  
<body>  
<p>Click on any square:</p>  
<span id="lresult"> </span>  
<span id="tresult"> </span>  

<div  style="background-color:#7fffd4"> </div>  
<div  style="background-color:#a52a2a"> </div>  
<div  style="background-color:#7fff00"> </div>  
<div  style="background-color:#ff1493"> </div>  
</body>  
</html>  


31) jQuery position()
---------------------
This method makes you able to retrieve the current position of an element relative to the parent element. It returns the position of the first matched element. This method returns the object with two properties: top and left position in pixels.

The jQuery position() method is different from jQuery offset() method because the position() method retrieves the current position of an element relative to the parent element while the offset() method retrieves the current position relative to the document.

The position() method is more useful when you want to position a new element near another one within the same containing DOM element.

Syntax:

    $(selector).position()   


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
$("button").click(function()
{  
 var x=$("p").position();  
 alert("Top position: " + x.top + " Left position: " + x.left);  
});  
});  
</script>  
</head>  
<body>  
<p>This is a Paragraph</p>  
<button>Click here to return the offset coordinates of the p element</button>  
</body>  
</html>  



32) jQuery addClass()
----------------------
The addclass() method is used to add one or more class name to the selected element.

If you want to add more than one class separate the class names with spaces.

Syntax:

    $(selector).addClass(classname,function(index,oldclass))   


Classname 	It is a mandatory parameter. It specifies one or more class names which you want to add.
Function (index, currentclass) 	It is an optional parameter. It specifies a function that returns one or more class names to be added.

    Index: It is used to provide the index position of the element in the set.
    Currentclass: It is used to return the current class name of the selected element.


Example - 1

<html>  
<head>  
<style>  
.intro 
{  
 font-size: 200%;  
 color: red;  
 font-family:verdana;
}  
</style> 

<script src="jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p:first").addClass("intro");  
 });  
});  
</script>  
 
</head>  
<body>  
<h1>This is a heading</h1>  

<p>This is a paragraph.</p>  
<p>This is another paragraph.</p>

<button>Add a class name to the first p element</button>  
</body>  
</html>  


33) jQuery hasClass()
---------------------
This method is used to check whether selected elements have specified class name or not. It returns TRUE if the specified class is present in any of the selected elements otherwise it returns FALSE.

Syntax:

    $(selector).hasClass(classname)   

Example - 1

<html>  
<head>  
<style>  
.intro 
{  
 font-size: 150%;  
 color: Blue;  
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  alert($("p").hasClass("intro"));  
 });  
});  
</script>  

</head>  
<body>  
<h1>This is a heading.</h1>  
<p class="intro">This is a paragraph. </p>  
<p>This is also a paragraph.</p>  
<button>Click here to check if any p element have an "intro" class?</button> 
</body>  
</html>  


Example - 2

<html>  
<head>  
<title>The Selecter Example</title>  
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js">  
</script>  
<script type="text/javascript" language="javascript">  
$(document).ready(function() {  
$("#result1").text( $("p#pid1").hasClass("red") );  
$("#result2").text( $("p#pid2").hasClass("red") );  
});  
</script>  
<style>  
.red { color:red; }  
.blue { color:blue; }  
</style>  
</head>  
<body>  
<p class="red" id="pid1">This is first paragraph.</p>  
<p class="blue" id="pid2">This is second paragraph.</p>  
<div id="result1"></div>  
<div id="result2"></div>  
</body>  
</html>  

Example - 3

<html>  
<head>  
<title>The Selecter Example</title>  
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js">  
</script>  
<script type="text/javascript" language="javascript">  
$(document).ready(function() {  
$("#result1").text( $("p#pid1").hasClass("red") );  
$("#result2").text( $("p#pid2").hasClass("blue") );  
});  
</script>  
<style>  
.red { color:red; }  
.blue { color:blue; }  
</style>  
</head>  
<body>  
<p class="red" id="pid1">This is first paragraph.</p>  
<p class="blue" id="pid2">This is second paragraph.</p>  
<div id="result1"></div>  
<div id="result2"></div>  
</body>  
</html>  

Example - 4

<html>  
 <head>   
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>  
  <script>  
  $(document).ready(function() {     
   $(".btn").click(function(){   
    var className = $(this).attr("id");  
    $("ul li").each(function() {       
     if ($(this).hasClass(className)) {  
      $(this).fadeTo('slow', 0.0).fadeTo('slow', 1.0);        
     }  
    });      
   });   
  });  
  </script>     
  <style>  
  ul{  
   font-family: monospace;  
   font-size: 15px;  
   font-family: monospace;   
   font-style: normal;  
   font-size-adjust: none;  
   width:200px;     
   padding:0px;   
  }  
     
  ul li{  
   background-color:#7fffd4;  
   width:100px;  
   margin:5px;  
   padding:5px;  
   list-style-type:none;  
   width:200px;  
  }  
  </style>  
 </head>  
 <body>  
 <h1>jQuery .hasClass() function Example</h1>     
 <ul>  
  <li class="red">Red</li>    
  <li class="green">Green</li>       
  <li class="green red">Green Red</li>  
  <li class="blue">Blue</li>  
 </ul>   
 <input type="button" class="btn" value="Red Class" id="red">  
 <input type="button" class="btn" value="Green Class" id="green">  
 <input type="button" class="btn" value="Blue Class" id="blue">  
 <input type="button" class="btn" value="No Matching Class" id="noclass">   
 </body>  
</html>  


34) jQuery toggleClass()
------------------------
This method is used to add or remove one or more classes from the selected elements. This method toggles between adding and removing one or more class name. It checks each element for the specified class names. If the class name is already set, it removes and if the class name is missing, it adds.

In this way, it creates the toggle effect. It also facilitates you to specify to only add or only remove by the use of switch parameter.

Syntax:

    $(selector).toggleClass(classname)



    $(selector).toggleClass(classname,function(index,currentclass),switch)  

classname 	It is a mandatory parameter. It specifies one or more class name to add or remove. If you use several classes then separate them by space.
function (index, currentclass) 	It is an optional parameter. It specifies one or more class names that you want to add or remove.

    Index: It provides the index position of the element in the set.
    Currentclass: It provides the current class name of the selected element.

switch 	It is also an optional parameter. It is a Boolean value which specifies whether the class should be added (true) or removed (false).


Example - 1

<html>  
<head>  
<style>
.main 
{  
 font-size: 30px;  
 color: red;  
 font-family:verdana;
}  
</style>

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").toggleClass("main");  
 });  
});  
</script>  

</head>  
<body>  
<button>Toggle class "main" for p 
elements </button>  

<br><br>

<p>Paragraph-1 </p>  
<p>Paragraph-2</p>  
</body>  
</html>  


35) jQuery width()
------------------
jQuery width() method is used to return or set the width of matched element.

To return width: When this method is used to return the width, it returns the width of first matched element.

To set width:When this method is used to set the width, it sets the width for every matched element.

This method is one of a jQuery dimension.

List of jQuery dimension:

    width()
    height()
    innerWidth()
    innerHeight()
    outerWidth()
    outerHeight()

Syntax:

To return the width:     $(selector).width()  

To set the width:     $(selector).width(value)   

To set the width using a function:    $(selector).width(function(index,currentwidth))   

Value 	It is a mandatory parameter. It is used for setting width. It specifies the width in px, em, pt etc. The default value of jQuery width() method is px.
Function(index, currentwidth) 	It is an optional parameter. It specifies a function that provides the new width of selected element.

    Index:IIt provides the index position of the element in the set.
    currentwidth:It provides the current width of the selected element.


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  alert("Width of div: "+ $("div").width());  
 });  
});  
</script>  
</head>

<body>  
<div style="height:100px;width:200px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"> </div><br>  
<button>Execute the jQuery width() method to return width</button>  
</body>  
</html>  


Example - 2

<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>width demo</title>  
  <style>  
  div {  
    width: 100px;  
    height: 80px;  
    float: left;  
    margin: 5px;  
    background:orange;  
    cursor: pointer;  
  }  
  .mod {  
    background: green;  
    cursor: default;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div>A</div>  
<div>B</div>  
<div>C</div>  
<div>D</div>  
<div>E</div>  
<script>  
var modWidth = 70;  
$( "div" ).one( "click", function() {  
  $( this ).width( modWidth ).addClass( "mod" );  
  modWidth -= 10;  
});  
</script>  
</body>  
</html>  


36) jQuery height()
-------------------
The jQuery height() method is used to return the current computed height for the first element or set the height of every matched element. In other words, you can say that the height() method is used for two purposes:

To return height: When this method is used to return height, it returns the height of first matched element.

To set height: When this method is used to set height, it sets height of all matched elements.

This method is a very common jQuery dimension.
The before() and insertBefore() both methods are used to perform same task. The main difference between them is in syntax, and the placement of the content and the target.

To return the height:

    $(selector).height()   

To set the height:

    $(selector).height(value)  

To set the height by using a function:

    $(selector).height(function(index,currentheight))  

Value 	This is a mandatory parameter. It specifies the height in px, em, pt, etc. its defauly unit is px.
Function (index, currentHeight) 	This is an optional parameter. This is used to specify a function that returns the new height of the selected element.

    Index:It provides the index position of the element in the set.
    currentHeight: It provides the current height of the selected element.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Height of div: " + $("div").height());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:200px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"><div class="div">Hello Guys!<br/> This is jQuery</div></div><br>  
<button>Display the height of div</button>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>height demo</title>  
  <style>  
  div {  
    width: 50px;  
    height: 100px;  
    float: left;  
    margin: 5px;  
    background: rgb(255,140,0);  
    cursor: pointer;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div></div>  
<div></div>  
<div></div>  
<div></div>  
<div></div>  
<script>  
$( "div" ).one( "click", function() {  
  $( this ).height( 50 ).css({  
    cursor: "auto",  
    backgroundColor: "green"  
  });  
});  
</script>  
</body>  
</html>  


37) jQuery innerWidth()
-----------------------
jQuery innerWidth() method is used to return the inner width of the first matched
element without including border and margin.

This method includes padding but excludes border and margin.

This image explains that jQuery innerWidth () method includes padding but not border and margin.

Syntax:

    $(selector).innerWidth()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  alert("Inner width of div is: "+ $("div").innerWidth());  
 });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the inner width of the div</button>  
</body>  
</html>  


<html>  
   <head>  
      <title>The jQuery Example</title>  
      <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>  
<script type="text/javascript" language="javascript">  
         $(document).ready(function() {  
            $("div").click(function () {  
               var color = $(this).css("background-color");  
               var width = $(this).innerWidth();  
               $("#result").html("Inner Width is <span>" + width + "</span>.");  
               $("#result").css({'color': color, 'background-color':'white'});  
            });  
         });  
      </script>  
<style>  
         #div1{ margin:10px;padding:10px; border:2px solid #666; width:60px;}  
         #div2 { margin:15px;padding:15px; border:4px solid #666; width:60px;}  
         #div3 { margin:20px;padding:20px; border:6px solid #666; width:60px;}  
         #div4 { margin:25px;padding:25px; border:8px solid #666; width:60px;}  
</style>  
</head>  
<body>  
<p>Click on any square:</p>  
<span id="result"> </span>  
<div id="div1" style="background-color:orange;"></div>  
<div id="div2" style="background-color:green;"></div>  
<div id="div3" style="background-color:brown;"></div>  
<div id="div4" style="background-color:violet;"></div>  
</body>  
</html>   


38) jQuery innerHeight()

The jQuery innerHeight () method is used to return the inner height of first matched element. It includes padding but not border and margin.

In the above image, you can see that innerHeight () method includes padding but not border and margin.

Syntax:

    $(selector).innerHeight()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Inner height of the div is: " + $("div").innerHeight());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the inner height of the div</button>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>innerHeight demo</title>  
  <style>  
div {  
  width: 60px;  
  padding: 10px;  
  height: 100px;  
  float: left;  
  margin: 5px;  
  background: orange;  
  cursor: pointer;  
}  
.mod {  
  background: green;  
  cursor: default;  
}  
</style>  
<script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div>A</div>  
<div>B</div>  
<div>C</div>  
<div>D</div>  
<div>E</div>  
<script>  
var modHeight = 80;  
$( "div" ).one( "click", function() {  
  $( this ).innerHeight( modHeight ).addClass( "mod" );  
  modHeight -= 8;  
});  
</script>  
</body>  
</html>  


39) jQuery outerWidth()
-----------------------
jQuery outerWidth() method is used to return the outer width of the first matched
element with padding and border.

The jQuery outerWidth () method works for both visible and hidden elements.

In the above image, you can see that jQuery outerWidth() method includes border and padding both.

Syntax:

    $(selector).outerWidth(includeMargin)  

includeMargin 	It is an optional parameter. It is a Boolean value which specifies whether to include the margin or not.

    False:It is a default value. It specifies that not to include margin.
    True:It specifies that include the margin.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Outer width of div is: " + $("div").outerWidth());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the outer width of the div</button>  
</body>  
</html>  


<html>  
   <head>  
      <title>The jQuery Example</title>  
      <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>  
          
      <script type="text/javascript" language="javascript">  
         $(document).ready(function() {  
            $("div").click(function () {  
               var color = $(this).css("background-color");  
               var width = $(this).outerWidth( true );  
               $("#result").html("Outer Width is <span>" + width + "</span>.");  
               $("#result").css({'color': color, 'background-color':'white'});  
            });  
         });  
      </script>  
<style>  
         #div1{ margin:10px;padding:10px; border:2px solid #666; width:60px;}  
         #div2 { margin:15px;padding:15px; border:4px solid #666; width:60px;}  
         #div3 { margin:20px;padding:20px; border:6px solid #666; width:60px;}  
         #div4 { margin:25px;padding:25px; border:8px solid #666; width:60px;}  
</style>  
</head>  
<body>  
<p>Click on any square:</p>  
<span id="result"> </span>  
<div id="div1" style="background-color:orange;"></div>  
<div id="div2" style="background-color:green;"></div>  
<div id="div3" style="background-color:brown;"></div>  
<div id="div4" style="background-color:violet;"></div>  
</body>  
</html>  


40) jQuery outerHeight()
------------------------
The jQuery outerHeight () method is used to return the outer height of first matched element. This method includes padding and border both.

In the above example, you can see that border and padding both are included in the outerHeight() method.

Syntax:

    $(selector).outerHeight(includeMargin)  


includeMargin 	This is a Boolean value which specifies whether to include the margin or not.

    False:It specifies that: Not to include the margin. It is a default value.
    True:It specifies that: Include the margin.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Outer height of the div is: " + $("div").outerHeight());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the outer height of the div</button>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>outerHeight demo</title>  
  <style>  
  div {  
    width: 60px;  
    padding: 10px;  
    height: 100px;  
    float: left;  
    margin: 5px;  
    background: Orange;  
    cursor: pointer;  
  }  
  .mod {  
    background: green;  
    cursor: default;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div>A</div>  
<div>B</div>  
<div>C</div>  
<div>D</div>  
<div>E</div>  
<script>  
var modHeight = 80;  
$( "div" ).one( "click", function() {  
  $( this ).outerHeight( modHeight ).addClass( "mod" );  
  modHeight -= 8;  
});  
</script>  
</body>  
</html>  


41) jQuery wrap()
-----------------
This method is used to wrap specified HTML elements around each selected element. The wrap () function can accept any string or object that could be passed through the $() factory function.

Syntax:

     $(selector).wrap(wrappingElement)

    $(selector).wrap(wrappingElement,function(index))   

WrappingElement 	It is a mandatory parameter. It specifies what HTML elements to wrap around each selected element. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements

Function(index) 	It is an optional parameter. It specifies a function that returns the wrapping element.

    Index: It provides the index position of the element in the set.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
   $("p").wrap("<div></div>");  
 });  
});  
</script>  
<style>  
div
{
background-color: pink;
}  
</style>  
</head>  

<body>  
<p>Hello Guys!</p>  
<p>This is jQuery</p>  
<button>Wrap a div element around each p 
element</button>  
</body>  
</html>  


<html>  
<head>  
<title>The jQuery Example</title>  
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>  
<script type="text/javascript" language="javascript">  
         $(document).ready(function() {  
            $("div").click(function () {  
               var content = '<div class="div"></div>';  
               $("#destination").wrap( content );  
            });  
         });  
</script>  
<style>  
.div{ margin:5px;padding:2px; border:2px solid #666; width:60px;}</style>  
</head>  
<body>  
<p>Click on any square to wrap the text:</p>  
<div class="div" id="destination">We are going to wrap this text</div>  
<div class="div" style="background-color:orange;">ONE</div>  
<div class="div" style="background-color:yellow;">TWO</div>  
<div class="div" style="background-color:green;">THREE</div>  
</body>  
</html>  


42) jQuery serialize()
----------------------
jQuery serialize() method is used to create a text string in standard URL-encoded notation. It is used in form controls like <input>, <textarea>, <select> etc. It serializes the form values so that its serialized values can be used in the URL query string while making an AJAX request.

Syntax:

    $ (selector).serialize()   

Example:
 
<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("div").text($("form").serialize()); 
 });  
});  
</script>  
</head>  

<body>  
<form action="">  
First name: <input type="text" name="FirstName" value="Sunil">

<br><br>  

Last name: <input type="text" name="LastName" value="Joseph">
<br><br>  
</form> 

<button>Serialize form values</button> 
<br><br>

<div></div>  
</body>  
</html>  


Note: Only successful controls are serialized to the string. It is not possible to serialize the form submitted by a submit button unless the form was submitted using a button. 