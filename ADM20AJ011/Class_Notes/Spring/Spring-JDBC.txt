Spring JdbcTemplate
===================

Spring JdbcTemplate is a powerful mechanism to connect to the database and execute SQL queries. It internally uses JDBC API, but eliminates a lot of problems of JDBC API.

Limitations of JDBC API
-----------------------
The limitations of JDBC API:

(a) We need to write a lot of code before and after executing the query, such as creating connection, statement, closing resultset, connection etc.

(b) We need to perform exception handling code on the database logic.

(c) We need to handle transaction.

(d) Repetition of all these codes from one to another database logic is a time consuming task.

Spring "JdbcTemplate" eliminates all the above mentioned problems of JDBC API. It provides you methods to write the queries directly, so it saves a lot of work and time.

Spring Jdbc Approaches
----------------------
Spring framework provides following approaches for JDBC database access:

(a) JdbcTemplate
(b) NamedParameterJdbcTemplate
(c) SimpleJdbcTemplate
(d) SimpleJdbcInsert and SimpleJdbcCall

1) JdbcTemplate class
---------------------
org.springframework.jdbc.core.JdbcTemplate

It is the central class in the Spring JDBC support classes. 

It takes care of creation and release of resources such as creating and closing of connection object etc.

It handles the exception and provides the informative exception messages by the help of excepion classes defined in the org.springframework.dao package.

We can perform all the database operations by the help of JdbcTemplate class such as insertion, updation, deletion and retrieval of the data from the database. 

Methods of Spring JdbcTemplate class
------------------------------------
1) public int update(String query)	is used to insert, update and delete records.

2) public int update(String query,Object... args)	is used to insert, update and delete records using PreparedStatement using given arguments.

3) public void execute(String query)	is used to execute DDL query.

4) public T execute(String sql, PreparedStatementCallback action)	executes the query by using PreparedStatement callback.

5) public T query(String sql, ResultSetExtractor rse)	is used to fetch records using ResultSetExtractor.

6) public List query(String sql, RowMapper rse)	is used to fetch records using RowMapper.

PRACTICE

1) create a DB table in MySQL "db_cognizant" Database with username : root and no password
mysql> connect db_cognizant;
mysql> create table emp(empno integer(5) primary key, ename varchar(25), sal float(10,2));  

2) Create a Maven Project in eclipse/ Spring Tool Suite and covert it into Maven Project
- Integrate spring-context , spring-jdbc , mysql connector dependencies in pom.xml
from mvnrepository.com  [spring, jdbc, mysql]

3) Create Entity (POJO) class to represent the database table

Employee.java

package com.cognizant.spring.emp.entity;

public class Employee 
{
int empno;
String ename;
double sal;

public Employee(){}

public Employee(int empno, String ename, double sal) 
{
	super();
	this.empno = empno;
	this.ename = ename;
	this.sal = sal;
}

//getter and setter methods

public String toString()
{
  return "Employee [" + empno + " | " + ename + " | " + sal+"]";	
}
}

3) Create an Interface 
DAO.java

package com.cognizant.spring.jdbc.dao;

import java.util.List;

public interface DAO {
 void saveEmp(Employee emp);
 void updateEmp(Employee emp);
 void deleteEmp(int empno);
 List<com.cognizant.Employee> getEmployees();
}


4) Implementation Class

EmployeeDAO.java

package com.cognizant.spring.jdbc.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;

public class EmployeeDAO implements DAO {

private JdbcTemplate jt;

public JdbcTemplate getJt() {
	return jt;
}

public void setJt(JdbcTemplate jt) {
	this.jt = jt;
}

@Override
public void saveEmp(Employee emp) {
 String sql="insert into emp values("+emp.getEmpno()+",'"+emp.getEname()+"',"+emp.getSal()+")";	
 int n=jt.update(sql);
 System.out.println("Employee Saved-"+n);	
}

@Override
public void updateEmp(Employee emp) {
 String sql="update emp set ename='"+emp.getEname()+"',sal="+emp.getSal()+" where empno="+emp.getEmpno();	
 int n=jt.update(sql);
 if(n>0){
   System.out.println("Employee Updated");
 }	
}

@Override
public void deleteEmp(int empno) {
 String sql="delete from emp where empno="+empno;	
 int x=jt.update(sql);
 if(x>0)
  System.out.println("Employee Deleted");
 else
  System.out.println("No matching employee found");	
}

@Override
public List<Employee> getEmployees() {
 String sql="select * from emp";
		
 List<com.cognizant.Employee> l=jt.query(sql, new ResultSetExtractor<java.util.List<Employee>>()
 {
  public List<Employee> extractData(ResultSet rs) throws SQLException,DataAccessException 
  {
   List<Employee> list=new ArrayList<Employee>();  
   while(rs.next()){  
    Employee e=new Employee();  
    e.setEmpno(rs.getInt(1));  
    e.setEname(rs.getString(2));  
    e.setSal(rs.getFloat(3));  
    list.add(e);  
   }  
   return list;  
  }  		
 });
 return l;
} 
}

5) Create Bean Configuration File
src/context.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

 <bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
 	<property name="driverClassName" value="com.mysql.jdbc.Driver" />
 	<property name="url" value="jdbc:mysql://localhost:3306/edureka" />
 	<property name="username" value="root" />
 	<property name="password" value="" />
 </bean>
 
 <bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
 	<property name="dataSource" ref="ds"/>
 </bean>
 
 <bean id="empdao" class="com.cognizant.EmployeeDAO">
 	<property name="jt" ref="template" />
 </bean>
 
</beans>

-----------------------------
String sql = "SELECT * from contact where contact_id="+id;
 ResultSetExtractor<Contact> extractor = new ResultSetExtractor<Contact>() {
   public Contact extractData(ResultSet rs) throws SQLException, DataAccessException {
     if(rs.next()) {
	String name = rs.getString("name");
	String email = rs.getString("email");
	String address = rs.getString("address");
	String phone = rs.getString("phone");
	return new Contact(name,email,address,phone);
     }
     return null;
   }			
 };
	
return jdbcTemplate.query(sql, extractor);
-----------------------------

6) Main.java

package com.cognizant;

import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main 
{
 public static void main(String[] args) 
 {
  ApplicationContext context=new ClassPathXmlApplicationContext("context.xml");
  DAO dao=context.getBean("edao", DAO.class);
		
  /*Employee emp=new Employee(103,"Srinivas",123.45f);
    dao.saveEmp(emp);*/
		
  /*Employee emp=new Employee(101,"Ajay Shankar",222.22f);
    dao.updateEmp(emp);*/
		
    List<com.cognizant.Employee> emps=dao.getEmployees();
    for(Employee e : emps) {
	System.out.println(e);
    }
  }
}
